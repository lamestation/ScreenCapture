#!/usr/bin/env python

import os
import sys
import re
import StringIO
from PIL import Image
import argparse

import serial
from serial.tools import list_ports

# intercept CTRL+C
import signal
def signal_handler(signal, frame):
    print
    sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)


ser = None
baudrate = 115200

def get_ports():
    pat = re.compile('ttyS.*')
    ports = list_ports.comports()
    ports = [p for p in ports if not pat.search(p[0])]
    ports.sort()

    return ports


def download_raw():
    
    global ser
    header = '\xAA\xAA\xAA\xAA'

    payload  = False
    incoming = ""

    try:
        while True:
            incoming += ser.read(2048 + len(header))

            if not payload:
                start = incoming.find(header)
                if start == -1:
                    incoming = incoming[1 - len(header):]
                    continue

                print "Receiving image."

                output   = ""
                payload  = True
                incoming = incoming[start + len(header):]

            if payload and len(output) < 2048:
                output += incoming[:2048 - len(output)]
                if len(output) == 2048:
                    print "Download complete."
                    break

    except Exception as e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)

    return output

    
def generate_bmp(data, scale = 4):

    def expand_2b_to_4b(data):

        output = ""
        for b in xrange(32):
            value   = ord(data[b])
            output += chr((value & 0x03) << 4 | (value & 0x0C) >> 2)
            output += chr((value & 0x30)      | (value & 0xC0) >> 6)

        return output


    header = 'BM\x46\x10\x00\x00\x00\x00\x00\x00\x46\x00\x00\x00'   \
            +'\x28\x00\x00\x00\x80\x00\x00\x00\x40\x00\x00\x00'     \
            +'\x01\x00\x04\x00\x00\x00\x00\x00\x00\x10\x00\x00'     \
            +'\x13\x0B\x00\x00\x13\x0B\x00\x00\x04\x00\x00\x00'     \
            +'\x00\x00\x00\x00'                                     \
            +'\xFE\x40\x71\x00'                                     \
            +'\xCC\xCC\xCC\x00'                                     \
            +'\x00\x00\xFF\x00'                                     \
            +'\xE1\x7D\xB1\x00'

    payload = ""
    for y in xrange(63, -1, -1):
        payload += expand_2b_to_4b(data[32*y:][:32])

    data = StringIO.StringIO(header + payload)
    im = Image.open(data)

    size = im.size
    newsize = (im.size[0]*scale, im.size[1]*scale)

    return im.resize(newsize)

    
def main():
    defaultscale = 4

    global baudrate
    global ser

    parser = argparse.ArgumentParser(description='Take screenshots of LameStation games! (epic!)')
    parser.add_argument('port',metavar='PORT',nargs='?',help='Port to capture image')

    parser.add_argument('-s','--scale',metavar='FACTOR',nargs=1,type=int,default=[defaultscale],
            help='Integer factor by which to scale the output image (default: '+str(defaultscale)+')')

    parser.add_argument('-o','--out',metavar='FILE',nargs=1,help="Specify output file name prefix")
    parser.add_argument('-l','--list',action='store_true',help="List ports available to capture from")
    parser.add_argument('-b','--baudrate',metavar="BAUD",type=int,nargs=1,help="Set baud rate of port")

    args = parser.parse_args()

    if args.list:
        ports = get_ports()
        for p in ports:
            print p[0]
        sys.exit()

    if not args.port:
        print "Error: port not specified\nrun with '--list' to get available ports"
        sys.exit(1)

    print "Listening for capture input on port '" + args.port + "'..."

    if args.baudrate:
        baudrate = args.baudrate

    if not args.out:
        args.out = 'pic'
    else:
        args.out = args.out[0]

    try:
        ser = serial.Serial(args.port, baudrate, timeout = 2)
    except Exception as e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)

    output = ""
    index = 1

    while True:
        while True:
            output = args.out+str(index).zfill(3)+'.png'
            if not os.path.exists(output):
                break
            index += 1

        data = download_raw()
        im   = generate_bmp(data, args.scale[0])

        print "Generating "+output
        im.save(output)
        index += 1

    if ser:
        ser.close()

if __name__ == '__main__':
    main()
